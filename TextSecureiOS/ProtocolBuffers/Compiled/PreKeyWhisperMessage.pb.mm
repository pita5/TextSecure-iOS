// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PreKeyWhisperMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PreKeyWhisperMessage.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* PreKeyWhisperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreKeyWhisperMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PreKeyWhisperMessage_2eproto() {
  protobuf_AddDesc_PreKeyWhisperMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PreKeyWhisperMessage.proto");
  GOOGLE_CHECK(file != NULL);
  PreKeyWhisperMessage_descriptor_ = file->message_type(0);
  static const int PreKeyWhisperMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, prekeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, basekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, identitykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, message_),
  };
  PreKeyWhisperMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreKeyWhisperMessage_descriptor_,
      PreKeyWhisperMessage::default_instance_,
      PreKeyWhisperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreKeyWhisperMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreKeyWhisperMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PreKeyWhisperMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreKeyWhisperMessage_descriptor_, &PreKeyWhisperMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PreKeyWhisperMessage_2eproto() {
  delete PreKeyWhisperMessage::default_instance_;
  delete PreKeyWhisperMessage_reflection_;
}

void protobuf_AddDesc_PreKeyWhisperMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032PreKeyWhisperMessage.proto\022\ntextsecure"
    "\"_\n\024PreKeyWhisperMessage\022\020\n\010preKeyId\030\001 \001"
    "(\r\022\017\n\007baseKey\030\002 \001(\014\022\023\n\013identityKey\030\003 \001(\014"
    "\022\017\n\007message\030\004 \001(\014", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PreKeyWhisperMessage.proto", &protobuf_RegisterTypes);
  PreKeyWhisperMessage::default_instance_ = new PreKeyWhisperMessage();
  PreKeyWhisperMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PreKeyWhisperMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PreKeyWhisperMessage_2eproto {
  StaticDescriptorInitializer_PreKeyWhisperMessage_2eproto() {
    protobuf_AddDesc_PreKeyWhisperMessage_2eproto();
  }
} static_descriptor_initializer_PreKeyWhisperMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PreKeyWhisperMessage::kPreKeyIdFieldNumber;
const int PreKeyWhisperMessage::kBaseKeyFieldNumber;
const int PreKeyWhisperMessage::kIdentityKeyFieldNumber;
const int PreKeyWhisperMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

PreKeyWhisperMessage::PreKeyWhisperMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreKeyWhisperMessage::InitAsDefaultInstance() {
}

PreKeyWhisperMessage::PreKeyWhisperMessage(const PreKeyWhisperMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreKeyWhisperMessage::SharedCtor() {
  _cached_size_ = 0;
  prekeyid_ = 0u;
  basekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreKeyWhisperMessage::~PreKeyWhisperMessage() {
  SharedDtor();
}

void PreKeyWhisperMessage::SharedDtor() {
  if (basekey_ != &::google::protobuf::internal::kEmptyString) {
    delete basekey_;
  }
  if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete identitykey_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void PreKeyWhisperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreKeyWhisperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreKeyWhisperMessage_descriptor_;
}

const PreKeyWhisperMessage& PreKeyWhisperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PreKeyWhisperMessage_2eproto();
  return *default_instance_;
}

PreKeyWhisperMessage* PreKeyWhisperMessage::default_instance_ = NULL;

PreKeyWhisperMessage* PreKeyWhisperMessage::New() const {
  return new PreKeyWhisperMessage;
}

void PreKeyWhisperMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prekeyid_ = 0u;
    if (has_basekey()) {
      if (basekey_ != &::google::protobuf::internal::kEmptyString) {
        basekey_->clear();
      }
    }
    if (has_identitykey()) {
      if (identitykey_ != &::google::protobuf::internal::kEmptyString) {
        identitykey_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreKeyWhisperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 preKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prekeyid_)));
          set_has_prekeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseKey;
        break;
      }

      // optional bytes baseKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_basekey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_identityKey;
        break;
      }

      // optional bytes identityKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identityKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identitykey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreKeyWhisperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 preKeyId = 1;
  if (has_prekeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prekeyid(), output);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->basekey(), output);
  }

  // optional bytes identityKey = 3;
  if (has_identitykey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->identitykey(), output);
  }

  // optional bytes message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreKeyWhisperMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 preKeyId = 1;
  if (has_prekeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prekeyid(), target);
  }

  // optional bytes baseKey = 2;
  if (has_basekey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->basekey(), target);
  }

  // optional bytes identityKey = 3;
  if (has_identitykey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->identitykey(), target);
  }

  // optional bytes message = 4;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreKeyWhisperMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 preKeyId = 1;
    if (has_prekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prekeyid());
    }

    // optional bytes baseKey = 2;
    if (has_basekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->basekey());
    }

    // optional bytes identityKey = 3;
    if (has_identitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identitykey());
    }

    // optional bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreKeyWhisperMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreKeyWhisperMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreKeyWhisperMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreKeyWhisperMessage::MergeFrom(const PreKeyWhisperMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prekeyid()) {
      set_prekeyid(from.prekeyid());
    }
    if (from.has_basekey()) {
      set_basekey(from.basekey());
    }
    if (from.has_identitykey()) {
      set_identitykey(from.identitykey());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreKeyWhisperMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreKeyWhisperMessage::CopyFrom(const PreKeyWhisperMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreKeyWhisperMessage::IsInitialized() const {

  return true;
}

void PreKeyWhisperMessage::Swap(PreKeyWhisperMessage* other) {
  if (other != this) {
    std::swap(prekeyid_, other->prekeyid_);
    std::swap(basekey_, other->basekey_);
    std::swap(identitykey_, other->identitykey_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreKeyWhisperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreKeyWhisperMessage_descriptor_;
  metadata.reflection = PreKeyWhisperMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
