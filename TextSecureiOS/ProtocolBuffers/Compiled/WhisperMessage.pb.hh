// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WhisperMessage.proto

#ifndef PROTOBUF_WhisperMessage_2eproto__INCLUDED
#define PROTOBUF_WhisperMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WhisperMessage_2eproto();
void protobuf_AssignDesc_WhisperMessage_2eproto();
void protobuf_ShutdownFile_WhisperMessage_2eproto();

class WhisperMessage;

// ===================================================================

class WhisperMessage : public ::google::protobuf::Message {
 public:
  WhisperMessage();
  virtual ~WhisperMessage();

  WhisperMessage(const WhisperMessage& from);

  inline WhisperMessage& operator=(const WhisperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhisperMessage& default_instance();

  void Swap(WhisperMessage* other);

  // implements Message ----------------------------------------------

  WhisperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhisperMessage& from);
  void MergeFrom(const WhisperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ephemeralKey = 1;
  inline bool has_ephemeralkey() const;
  inline void clear_ephemeralkey();
  static const int kEphemeralKeyFieldNumber = 1;
  inline const ::std::string& ephemeralkey() const;
  inline void set_ephemeralkey(const ::std::string& value);
  inline void set_ephemeralkey(const char* value);
  inline void set_ephemeralkey(const void* value, size_t size);
  inline ::std::string* mutable_ephemeralkey();
  inline ::std::string* release_ephemeralkey();
  inline void set_allocated_ephemeralkey(::std::string* ephemeralkey);

  // optional uint32 counter = 2;
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 2;
  inline ::google::protobuf::uint32 counter() const;
  inline void set_counter(::google::protobuf::uint32 value);

  // optional uint32 previousCounter = 3;
  inline bool has_previouscounter() const;
  inline void clear_previouscounter();
  static const int kPreviousCounterFieldNumber = 3;
  inline ::google::protobuf::uint32 previouscounter() const;
  inline void set_previouscounter(::google::protobuf::uint32 value);

  // optional bytes ciphertext = 4;
  inline bool has_ciphertext() const;
  inline void clear_ciphertext();
  static const int kCiphertextFieldNumber = 4;
  inline const ::std::string& ciphertext() const;
  inline void set_ciphertext(const ::std::string& value);
  inline void set_ciphertext(const char* value);
  inline void set_ciphertext(const void* value, size_t size);
  inline ::std::string* mutable_ciphertext();
  inline ::std::string* release_ciphertext();
  inline void set_allocated_ciphertext(::std::string* ciphertext);

  // @@protoc_insertion_point(class_scope:textsecure.WhisperMessage)
 private:
  inline void set_has_ephemeralkey();
  inline void clear_has_ephemeralkey();
  inline void set_has_counter();
  inline void clear_has_counter();
  inline void set_has_previouscounter();
  inline void clear_has_previouscounter();
  inline void set_has_ciphertext();
  inline void clear_has_ciphertext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ephemeralkey_;
  ::google::protobuf::uint32 counter_;
  ::google::protobuf::uint32 previouscounter_;
  ::std::string* ciphertext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WhisperMessage_2eproto();
  friend void protobuf_AssignDesc_WhisperMessage_2eproto();
  friend void protobuf_ShutdownFile_WhisperMessage_2eproto();

  void InitAsDefaultInstance();
  static WhisperMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WhisperMessage

// optional bytes ephemeralKey = 1;
inline bool WhisperMessage::has_ephemeralkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhisperMessage::set_has_ephemeralkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhisperMessage::clear_has_ephemeralkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhisperMessage::clear_ephemeralkey() {
  if (ephemeralkey_ != &::google::protobuf::internal::kEmptyString) {
    ephemeralkey_->clear();
  }
  clear_has_ephemeralkey();
}
inline const ::std::string& WhisperMessage::ephemeralkey() const {
  return *ephemeralkey_;
}
inline void WhisperMessage::set_ephemeralkey(const ::std::string& value) {
  set_has_ephemeralkey();
  if (ephemeralkey_ == &::google::protobuf::internal::kEmptyString) {
    ephemeralkey_ = new ::std::string;
  }
  ephemeralkey_->assign(value);
}
inline void WhisperMessage::set_ephemeralkey(const char* value) {
  set_has_ephemeralkey();
  if (ephemeralkey_ == &::google::protobuf::internal::kEmptyString) {
    ephemeralkey_ = new ::std::string;
  }
  ephemeralkey_->assign(value);
}
inline void WhisperMessage::set_ephemeralkey(const void* value, size_t size) {
  set_has_ephemeralkey();
  if (ephemeralkey_ == &::google::protobuf::internal::kEmptyString) {
    ephemeralkey_ = new ::std::string;
  }
  ephemeralkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhisperMessage::mutable_ephemeralkey() {
  set_has_ephemeralkey();
  if (ephemeralkey_ == &::google::protobuf::internal::kEmptyString) {
    ephemeralkey_ = new ::std::string;
  }
  return ephemeralkey_;
}
inline ::std::string* WhisperMessage::release_ephemeralkey() {
  clear_has_ephemeralkey();
  if (ephemeralkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ephemeralkey_;
    ephemeralkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhisperMessage::set_allocated_ephemeralkey(::std::string* ephemeralkey) {
  if (ephemeralkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ephemeralkey_;
  }
  if (ephemeralkey) {
    set_has_ephemeralkey();
    ephemeralkey_ = ephemeralkey;
  } else {
    clear_has_ephemeralkey();
    ephemeralkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 counter = 2;
inline bool WhisperMessage::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhisperMessage::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhisperMessage::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhisperMessage::clear_counter() {
  counter_ = 0u;
  clear_has_counter();
}
inline ::google::protobuf::uint32 WhisperMessage::counter() const {
  return counter_;
}
inline void WhisperMessage::set_counter(::google::protobuf::uint32 value) {
  set_has_counter();
  counter_ = value;
}

// optional uint32 previousCounter = 3;
inline bool WhisperMessage::has_previouscounter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhisperMessage::set_has_previouscounter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhisperMessage::clear_has_previouscounter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhisperMessage::clear_previouscounter() {
  previouscounter_ = 0u;
  clear_has_previouscounter();
}
inline ::google::protobuf::uint32 WhisperMessage::previouscounter() const {
  return previouscounter_;
}
inline void WhisperMessage::set_previouscounter(::google::protobuf::uint32 value) {
  set_has_previouscounter();
  previouscounter_ = value;
}

// optional bytes ciphertext = 4;
inline bool WhisperMessage::has_ciphertext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhisperMessage::set_has_ciphertext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhisperMessage::clear_has_ciphertext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhisperMessage::clear_ciphertext() {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    ciphertext_->clear();
  }
  clear_has_ciphertext();
}
inline const ::std::string& WhisperMessage::ciphertext() const {
  return *ciphertext_;
}
inline void WhisperMessage::set_ciphertext(const ::std::string& value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void WhisperMessage::set_ciphertext(const char* value) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(value);
}
inline void WhisperMessage::set_ciphertext(const void* value, size_t size) {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  ciphertext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhisperMessage::mutable_ciphertext() {
  set_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    ciphertext_ = new ::std::string;
  }
  return ciphertext_;
}
inline ::std::string* WhisperMessage::release_ciphertext() {
  clear_has_ciphertext();
  if (ciphertext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ciphertext_;
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhisperMessage::set_allocated_ciphertext(::std::string* ciphertext) {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (ciphertext) {
    set_has_ciphertext();
    ciphertext_ = ciphertext;
  } else {
    clear_has_ciphertext();
    ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WhisperMessage_2eproto__INCLUDED
