// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WhisperMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WhisperMessage.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace textsecure {

namespace {

const ::google::protobuf::Descriptor* WhisperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhisperMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WhisperMessage_2eproto() {
  protobuf_AddDesc_WhisperMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WhisperMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WhisperMessage_descriptor_ = file->message_type(0);
  static const int WhisperMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, ephemeralkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, previouscounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, ciphertext_),
  };
  WhisperMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhisperMessage_descriptor_,
      WhisperMessage::default_instance_,
      WhisperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhisperMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WhisperMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhisperMessage_descriptor_, &WhisperMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WhisperMessage_2eproto() {
  delete WhisperMessage::default_instance_;
  delete WhisperMessage_reflection_;
}

void protobuf_AddDesc_WhisperMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WhisperMessage.proto\022\ntextsecure\"d\n\016Wh"
    "isperMessage\022\024\n\014ephemeralKey\030\001 \001(\014\022\017\n\007co"
    "unter\030\002 \001(\r\022\027\n\017previousCounter\030\003 \001(\r\022\022\n\n"
    "ciphertext\030\004 \001(\014", 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WhisperMessage.proto", &protobuf_RegisterTypes);
  WhisperMessage::default_instance_ = new WhisperMessage();
  WhisperMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WhisperMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WhisperMessage_2eproto {
  StaticDescriptorInitializer_WhisperMessage_2eproto() {
    protobuf_AddDesc_WhisperMessage_2eproto();
  }
} static_descriptor_initializer_WhisperMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WhisperMessage::kEphemeralKeyFieldNumber;
const int WhisperMessage::kCounterFieldNumber;
const int WhisperMessage::kPreviousCounterFieldNumber;
const int WhisperMessage::kCiphertextFieldNumber;
#endif  // !_MSC_VER

WhisperMessage::WhisperMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhisperMessage::InitAsDefaultInstance() {
}

WhisperMessage::WhisperMessage(const WhisperMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhisperMessage::SharedCtor() {
  _cached_size_ = 0;
  ephemeralkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counter_ = 0u;
  previouscounter_ = 0u;
  ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhisperMessage::~WhisperMessage() {
  SharedDtor();
}

void WhisperMessage::SharedDtor() {
  if (ephemeralkey_ != &::google::protobuf::internal::kEmptyString) {
    delete ephemeralkey_;
  }
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (this != default_instance_) {
  }
}

void WhisperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhisperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperMessage_descriptor_;
}

const WhisperMessage& WhisperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WhisperMessage_2eproto();
  return *default_instance_;
}

WhisperMessage* WhisperMessage::default_instance_ = NULL;

WhisperMessage* WhisperMessage::New() const {
  return new WhisperMessage;
}

void WhisperMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ephemeralkey()) {
      if (ephemeralkey_ != &::google::protobuf::internal::kEmptyString) {
        ephemeralkey_->clear();
      }
    }
    counter_ = 0u;
    previouscounter_ = 0u;
    if (has_ciphertext()) {
      if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
        ciphertext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhisperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ephemeralKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ephemeralkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counter;
        break;
      }

      // optional uint32 counter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_previousCounter;
        break;
      }

      // optional uint32 previousCounter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previousCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previouscounter_)));
          set_has_previouscounter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ciphertext;
        break;
      }

      // optional bytes ciphertext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ciphertext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ciphertext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhisperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ephemeralKey = 1;
  if (has_ephemeralkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ephemeralkey(), output);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->counter(), output);
  }

  // optional uint32 previousCounter = 3;
  if (has_previouscounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->previouscounter(), output);
  }

  // optional bytes ciphertext = 4;
  if (has_ciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ciphertext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhisperMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ephemeralKey = 1;
  if (has_ephemeralkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ephemeralkey(), target);
  }

  // optional uint32 counter = 2;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->counter(), target);
  }

  // optional uint32 previousCounter = 3;
  if (has_previouscounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->previouscounter(), target);
  }

  // optional bytes ciphertext = 4;
  if (has_ciphertext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ciphertext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhisperMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ephemeralKey = 1;
    if (has_ephemeralkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ephemeralkey());
    }

    // optional uint32 counter = 2;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counter());
    }

    // optional uint32 previousCounter = 3;
    if (has_previouscounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previouscounter());
    }

    // optional bytes ciphertext = 4;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ciphertext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhisperMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhisperMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhisperMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhisperMessage::MergeFrom(const WhisperMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ephemeralkey()) {
      set_ephemeralkey(from.ephemeralkey());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_previouscounter()) {
      set_previouscounter(from.previouscounter());
    }
    if (from.has_ciphertext()) {
      set_ciphertext(from.ciphertext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhisperMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhisperMessage::CopyFrom(const WhisperMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhisperMessage::IsInitialized() const {

  return true;
}

void WhisperMessage::Swap(WhisperMessage* other) {
  if (other != this) {
    std::swap(ephemeralkey_, other->ephemeralkey_);
    std::swap(counter_, other->counter_);
    std::swap(previouscounter_, other->previouscounter_);
    std::swap(ciphertext_, other->ciphertext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhisperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhisperMessage_descriptor_;
  metadata.reflection = WhisperMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace textsecure

// @@protoc_insertion_point(global_scope)
